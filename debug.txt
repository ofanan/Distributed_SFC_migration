<!> Error: Model error: t=30003.000000. DC 799 : pushUpList is not empty
 -- in module (Datacenter) Lux.datacenters[799] (id=802), at t=4s, event #10648


The prob' chain is 230.
s26, the grandpa of s799, has 230 in its PUL. It probably sends it to s101, the prnt of s799.
The prnt of s799 is s101, which is also in F-mode, and therefore immediately sends to its children the PUL, without trying to PU.
Maybe the prob' is that the root causes a clearance delay, and shortly later finishes the time period, and then the PU nack pkg doesn't arrive to s799.
Maybe the prob' is:
RegainRsrcOfpushedUpChains indeed checks for potPlaced chains that were / weren't pushed-up. But maybe it should do a similar thing with chains in the PUL?

Improvements:
- need to finish reshAsync much earlier if I'm a leaf?
- in pushDwn (), add a check if the pushed-dwn chain was in my PUL. If so -> remove it from the PUL.
Or simply - clear PUL in finReshAsync, just as we clear potPlacedChains.

Corrected the insertions / clearance of chainsThatJoined and chainsThatLeft in SimController.
Changed SimController, so that now Async-mode sim begins by Async mode (rather than having first "warmup" cycle as Sync).
However, this causes:
<!> Error: Model error: s39 tried to block chain 2251 that wasn't found in ChainsMaster -- in module (Datacenter) Lux.datacenters[39] (id=42), at t=0.068000000745s, 

The prob': chain 2251 is in s39.notAssigned. S39 begins initReshAsync due to another chain. Then, s39 inserts c2251 to pushDwnReq, with lvl=s39.lvl==2.
Then, after running resh, when running again BU / BU-f, s39 blocks c2251. When it asks chainsMaster to block c2251, c2251 realizes that it tried to block 
a chain that already has a lvl!=UNPLACED_LVL.

But why does c2251 have l=2 in chainsMaster? 
indeed in Datacenter.cc ln.1407 we have
			availCpu -= requiredCpuToLocallyPlaceThisChain;
			placedChains.insert (chainPtr->id); 				
			ChainsMaster::modifyLvl (chainPtr->id, lvl);

seems that we have to check whether this chain was in s39.notAssigned. If this is the case, and we place it on s39, than we should remove it from notAssigned.

Another prob': a pushed-down chain should be moved from "not assigned" of ALL DCs?
 - not exactly, as only the initiator inserts notAssigned chains into pushDwnReq.
 - but then, isn't it better to remove any chain inserted to pushDwnReq from notAssigned? - not exactly, because, not if it's not pushedDwn?...
Also, should check pushDwnAck: do we really removed pushed-down chains from my notAssigned.

Now, add a check, to verify that no chain is placed in 2 DCs.

trace Time=30000.000f, chain 295 was blocked whlie having curLvl=2 and curDc=-1
The wrong error msg is:  
	<!> Error: Model error: s0 tried to block chain 295 that wasn't found in ChainsMaster -- in module (Datacenter) Lux.datacenters[0] (id=3), at t=0.479000000745s, 
c295 belongs to s1682.
s24.lvl == 2.

s24 : chains pushed-dwn to me: c1476 from l5, c2564 from l5, c295 from l5, 
s24 : snding to prnt pushDwnAck=c1708 l=0, c1476 l=2, c2564 l=2, c295 l=2,  potPlaced=, PUL= is in F
So why is s0 trying to block c295?


because s0 finished sending to all children, but didn't wait for their replies!
Found a prob': before sending the reshAsyncPkt to prnt, a Dc may better wait a little for the last child's reply?
But indeed, it should send reshAsyncPkt to prnt, only after finished calling all children (and have their replies?).

Prob': pushDwnReq sends to child many chains (pushDwnReqFromChild). The child includes in its answer, in pushDwnAck, only the chains it succeeded to push-down.
Then, in handlePushDwnFromChild, the parent considers only the chains that appeared in the ack. Hence, the chains remain in pushDwnReq, 
even if there's no hope anymore to push them down.
Possible sol: while sending to child, keep this->pushDwnReqFromChild. As we send to children serially, one such state var is enough.
Then, when getting the child's reply, may move from pushDwnReq all chains that are from my level, and the child didn't push-down.
If the chains are from above me, maybe later, when I have more space, I'll succeed to push-them down to myself.

traceT=30000.000000 : c2256 found in s4.placedChain is recorded in ChainsMaster as placed on s0
c2256 is orginiated from s1443. not Assigned in s1443, s300, s80, s19, s4, s0. 
Ln. 20797 ************** simT=0.050, s0 : init resh at lvl 5. 
In Ln. 23047: s0, already reshuffling, has s1443 in its pushDwnReq.
24114: s4 has c2256 l=5 in its pushDwnReq. And then s19, s80, s300.
Ln. 24381: 
s80 : chains pushed-dwn to me: c2256 from l5, c2487 from l5, c2665 from l5, c2074 from l4, c1990 from l2, 
Ln. 24390:
s19 : snding to prnt pushDwnAck=c2139 l=2, c2819 l=2, c2256 l=2, c2487 l=2, c2665 l=2, c2074 l=2,  potPlaced=, PUL= is in F
Ln. 24393:
s4 : in handleReshAsyncPktFromChild
Ln. 24397:
s4 : chains pushed-dwn to me: c2256 from l5,  BANG@@@
