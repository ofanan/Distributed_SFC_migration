//
// Generated file, do not edit! Created by nedtool 5.6 from placementInfoMsg.msg.
//

#ifndef __PLACEMENTINFOMSG_M_H
#define __PLACEMENTINFOMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#pragma once
// }}

/**
 * Class generated from <tt>placementInfoMsg.msg:10</tt> by nedtool.
 * <pre>
 * message placementInfoMsg
 * {
 *     int16_t datacenterId;   // Id of the reporting datacenter
 *     int32_t placedChains[]; // A list of chains that the sending datacenter has just placed.
 * }
 * </pre>
 */
class placementInfoMsg : public ::omnetpp::cMessage
{
  protected:
    int16_t datacenterId;
    int32_t *placedChains; // array ptr
    unsigned int placedChains_arraysize;

  private:
    void copy(const placementInfoMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const placementInfoMsg&);

  public:
    placementInfoMsg(const char *name=nullptr, short kind=0);
    placementInfoMsg(const placementInfoMsg& other);
    virtual ~placementInfoMsg();
    placementInfoMsg& operator=(const placementInfoMsg& other);
    virtual placementInfoMsg *dup() const override {return new placementInfoMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int16_t getDatacenterId() const;
    virtual void setDatacenterId(int16_t datacenterId);
    virtual void setPlacedChainsArraySize(unsigned int size);
    virtual unsigned int getPlacedChainsArraySize() const;
    virtual int32_t getPlacedChains(unsigned int k) const;
    virtual void setPlacedChains(unsigned int k, int32_t placedChains);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const placementInfoMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, placementInfoMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PLACEMENTINFOMSG_M_H

