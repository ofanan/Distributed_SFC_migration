//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/endXmtPkt.msg.
//

#ifndef __ENDXMTPKT_M_H
#define __ENDXMTPKT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class endXmtPkt;
/**
 * Class generated from <tt>src/endXmtPkt.msg:3</tt> by opp_msgtool.
 * <pre>
 * // indicates the end of xmting a pkt to a given port number
 * message endXmtPkt
 * {
 *     int16_t portNum;
 * }
 * </pre>
 */
class endXmtPkt : public ::omnetpp::cMessage
{
  protected:
    int16_t portNum = 0;

  private:
    void copy(const endXmtPkt& other);

  protected:
    bool operator==(const endXmtPkt&) = delete;

  public:
    endXmtPkt(const char *name=nullptr, short kind=0);
    endXmtPkt(const endXmtPkt& other);
    virtual ~endXmtPkt();
    endXmtPkt& operator=(const endXmtPkt& other);
    virtual endXmtPkt *dup() const override {return new endXmtPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int16_t getPortNum() const;
    virtual void setPortNum(int16_t portNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const endXmtPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, endXmtPkt& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline endXmtPkt *fromAnyPtr(any_ptr ptr) { return check_and_cast<endXmtPkt*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ENDXMTPKT_M_H

